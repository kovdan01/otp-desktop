name: Build Linux & macOS

on:
  push:
    branches: develop
  pull_request:
    branches: develop

jobs:
  build-core-server-client-desktop:
    name: ${{ format('{0} {1} {2}', matrix.config.prefix, matrix.config.build_type, matrix.config.suffix) }}
    runs-on: ${{ matrix.config.os }}
    env:
      YAML_CPP_VERSION: "0.6.3"
      LIBOATH_VERSION: "2.6.7"
      QT_VERSION: "5.15.2"
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            os: "ubuntu-latest",
            prefix: "Linux",
            suffix: "",
            artifact: "all-release-linux",
            build_type: "Release",
            cc: "gcc",
            cxx: "g++",
          }

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: "recursive"

    - name: Install required packages (Linux)
      if: ${{ runner.os == 'Linux' }}
      run: |
        sudo apt update
        sudo apt install libstdc++-10-dev gcc-10 g++-10 -y
        sudo apt install pkg-config -y
        sudo apt install p7zip-full -y
        sudo apt install python3 python3-pip -y

    - name: Create necessary symlinks (Linux)
      if: ${{ runner.os == 'Linux' }}
      run: |
        version=10
        priority=100

        sudo update-alternatives --install /usr/bin/gcc         gcc         /usr/bin/gcc-${version}         ${priority}
        sudo update-alternatives --install /usr/bin/gcc-ar      gcc-ar      /usr/bin/gcc-ar-${version}      ${priority}
        sudo update-alternatives --install /usr/bin/gcc-nm      gcc-nm      /usr/bin/gcc-nm-${version}      ${priority}
        sudo update-alternatives --install /usr/bin/gcc-ranlib  gcc-ranlib  /usr/bin/gcc-ranlib-${version}  ${priority}
        sudo update-alternatives --install /usr/bin/gcov        gcov        /usr/bin/gcov-${version}        ${priority}
        sudo update-alternatives --install /usr/bin/gcov-dump   gcov-dump   /usr/bin/gcov-dump-${version}   ${priority}
        sudo update-alternatives --install /usr/bin/gcov-tool   gcov-tool   /usr/bin/gcov-tool-${version}   ${priority}
        sudo update-alternatives --install /usr/bin/lto-dump    lto-dump    /usr/bin/lto-dump-${version}    ${priority}
        sudo update-alternatives --install /usr/bin/g++         g++         /usr/bin/g++-${version}         ${priority}

        sudo update-alternatives --install /usr/bin/cc   cc   /usr/bin/gcc-${version} ${priority}
        sudo update-alternatives --install /usr/bin/c++  c++  /usr/bin/g++-${version} ${priority}

    - name: Set environment variables
      shell: python3 {0}
      run: |
        import os

        repo = os.path.normpath(os.environ['GITHUB_WORKSPACE'])
        root = os.path.normpath(os.path.dirname(repo))

        with open(os.environ['GITHUB_ENV'], 'a') as env_file:
          env_file.write("REPO_PATH={}\n".format(repo))
          env_file.write("ROOT_PATH={}\n".format(root))

    - name: Init CI builder
      run: python3 ci/init.py

    - name: Download CMake
      id: download_cmake
      if: ${{ steps.cache_cmake.outputs.cache-hit != 'true' }}
      run: python3 ci/tools/cmake.py

    - name: Download Ninja
      id: download_ninja
      if: ${{ steps.cache_ninja.outputs.cache-hit != 'true' }}
      run: python3 ci/tools/ninja.py

    - name: Yaml CPP cache
      uses: actions/cache@v2
      id: cache_yaml_cpp_unix
      with:
        path: ${{ env.REPO_PATH }}/.deps/yaml-cpp-yaml-cpp-${{ env.YAML_CPP_VERSION }}
        key: ${{ runner.os }}-yaml-cpp-${{ env.YAML_CPP_VERSION }}

    - name: Yaml CPP
      if: ${{ steps.cache_yaml_cpp_unix.outputs.cache-hit != 'true' }}
      env:
        CC: ${{ matrix.config.cc }}
        CXX: ${{ matrix.config.cxx }}
      run: python3 ci/libs/yaml_cpp.py

    - name: LibOATH cache
      uses: actions/cache@v2
      id: cache_liboath_unix
      with:
        path: ${{ env.REPO_PATH }}/.deps/oath-toolkit-${{ env.LIBOATH_VERSION }}
        key: ${{ runner.os }}-liboath-${{ env.LIBOATH_VERSION }}

    - name: LibOATH
      if: ${{ steps.cache_liboath_unix.outputs.cache-hit != 'true' }}
      env:
        CC: ${{ matrix.config.cc }}
        CXX: ${{ matrix.config.cxx }}
      run: python3 ci/libs/liboath.py

    - name: Qt5 cache
      uses: actions/cache@v2
      id: cache_qt_unix
      with:
        path: ${{ env.REPO_PATH }}/.deps/qtbase-everywhere-src-${{ env.QT_VERSION }}
        key: ${{ runner.os }}-qt-qtbase-${{ env.QT_VERSION }}

    - name: Qt5
      if: ${{ steps.cache_qt_unix.outputs.cache-hit != 'true' }}
      env:
        CC: ${{ matrix.config.cc }}
        CXX: ${{ matrix.config.cxx }}
      run: python3 ci/libs/qt5base.py

    - name: Configure
      env:
        CC: ${{ matrix.config.cc }}
        CXX: ${{ matrix.config.cxx }}
      shell: python3 {0}
      run: |
        import os
        import sys

        repo = os.environ["REPO_PATH"]

        sys.path.append(os.path.join(repo, "ci"))

        from builder import Builder, load_builder, save_builder

        builder = load_builder()
        qt5base_prefix = self.get_prefix("qt5base")
        yaml_cpp_prefix = self.get_prefix("yaml-cpp")
        liboath_prefix = self.get_prefix("liboath")
        builder.build_cmake(source_dir=repo,
                            cmake_params='-D CMAKE_PREFIX_PATH="{};{};{}"'.format(qt5base_prefix, yaml_cpp_prefix, liboath_prefix))
        save_builder(builder)

    - name: Build
      env:
        CC: ${{ matrix.config.cc }}
        CXX: ${{ matrix.config.cxx }}
      run: cmake --build build --target all

    - name: Install Strip
      run: cmake --install build --prefix install --strip

    - name: Tar files
      run: tar -cvf install.tar ./install

    - name: Upload binaries
      if: ${{ matrix.config.artifact != '' }}
      uses: actions/upload-artifact@v2
      with:
        path: ./install.tar
        name: ${{ matrix.config.artifact }}
